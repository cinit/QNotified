apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"
    ndkVersion "21.3.6528147"

    defaultConfig {
        applicationId "nil.nadph.qnotified"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 38
        versionName "0.8.7" + (getBuildIdSuffix.call() as String) + (getGitHeadRefsSuffix.call() as String)
        //testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled false
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            //drop "mips" , 'armeabi',
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    aaptOptions {
        additionalParameters '--allow-reserved-package-id', '--package-id', '0x75'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    // Encapsulates your external native build configurations.
    externalNativeBuild {
        // Encapsulates your CMake build configurations.
        cmake {
            // Provides a relative path to your CMake build script.
            path "src/main/jni/CMakeLists.txt"
            version "3.10.2"
        }
    }

    viewBinding {
        enabled = true
    }
}

dependencies {
    compileOnly fileTree(include: ['*.jar'], dir: 'lib')
    implementation 'com.flyco.tablayout:FlycoTabLayout_Lib:2.1.2'
    implementation 'com.jaredrummler:colorpicker:1.1.0'
    implementation 'de.psdev.licensesdialog:licensesdialog:2.0.0'
    implementation 'io.noties.markwon:core:4.5.0'
    testImplementation 'junit:junit:4.12'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    // androidx
    implementation 'androidx.preference:preference:1.1.1'
}

dependencies {
    def appCenterSdkVersion = '3.3.0'
    implementation "com.microsoft.appcenter:appcenter-analytics:${appCenterSdkVersion}"
    implementation "com.microsoft.appcenter:appcenter-crashes:${appCenterSdkVersion}"
}

def _execDexTail = { String dexPath ->
    URLClassLoader cl = new URLClassLoader(new File(rootProject.projectDir, "app" + File.separator + "utils" + File.separator + "tail.jar").toURL());
    byte[] time = cl.loadClass("cc.ioctl.dextail.HexUtils").getMethod("getTimeAsByteArray").invoke(null) as byte[];
    PrintStream stdout = System.out;
    boolean result = cl.loadClass("cc.ioctl.dextail.Main").getMethod("checkAndUpdateTail", String.class, byte[].class, boolean.class, PrintStream.class)
            .invoke(null, dexPath, time, true, stdout);
    return result;
}

task dexTailDebug {
    doLast {
        println("dexTailDebug.doLast invoked");
        ArrayList<File> pathList = new ArrayList<>();
        //3.6.x
        String tmp_path = "intermediates/dex/debug/out/classes.dex";
        if (!"/".equals(File.separator)) {
            tmp_path = tmp_path.replace('/'.charAt(0), File.separatorChar);
        }
        File tmp_f = new File(project.buildDir, tmp_path);
        if (tmp_f.exists()) {
            pathList.add(tmp_f);
        }
        //4.0.x single
        tmp_path = "intermediates/dex/debug/mergeDexDebug/classes.dex";
        if (!"/".equals(File.separator)) {
            tmp_path = tmp_path.replace('/'.charAt(0), File.separatorChar);
        }
        tmp_f = new File(project.buildDir, tmp_path);
        if (tmp_f.exists()) {
            pathList.add(tmp_f);
        }
        //end
        if (pathList.size() == 0) {
            throw new RuntimeException("dex not found: we only support 3.6.x, 4.0.x and 4.1.x");
        }
        for (File f : pathList) {
            if (!_execDexTail(f.getAbsolutePath())) {
                throw new RuntimeException("DedxTail returned false");
            }
        }
    }
}

task dexTailRelease {
    doLast {
        println("dexTailRelease.doLast invoked")
        ArrayList<File> pathList = new ArrayList<>();
        //3.6.x single?
        String tmp_path = "intermediates/dex/release/out/classes.dex";
        if (!"/".equals(File.separator)) {
            tmp_path = tmp_path.replace('/'.charAt(0), File.separatorChar);
        }
        File tmp_f = new File(project.buildDir, tmp_path);
        if (tmp_f.exists()) {
            pathList.add(tmp_f);
        }
        //4.0.x single
        tmp_path = "intermediates/dex/release/mergeDexRelease/classes.dex";
        if (!"/".equals(File.separator)) {
            tmp_path = tmp_path.replace('/'.charAt(0), File.separatorChar);
        }
        tmp_f = new File(project.buildDir, tmp_path);
        if (tmp_f.exists()) {
            pathList.add(tmp_f);
        }
        //end
        if (pathList.size() == 0) {
            throw new RuntimeException("dex not found: we only support 3.6.x, 4.0.x and 4.1.x");
        }
        for (File f : pathList) {
            if (!_execDexTail(f.getAbsolutePath())) {
                throw new RuntimeException("DedxTail returned false");
            }
        }
    }
}

task replaceIcon(type: Copy) {
    delete 'src/main/res/drawable.png'
    def random = new Random()
    def iconsFileDir = file("icons/")
    def fileCount = iconsFileDir.listFiles().length
    def number = random.nextInt(fileCount)
    def iconFile = iconsFileDir.listFiles()[number]
    println iconFile
    from iconFile
    into "src/main/res/drawable/"
    rename { String fileName ->
        "icon.png"
    }
}

preBuild.dependsOn replaceIcon

tasks.whenTaskAdded { t ->
    if (t.name == 'assembleDebug') {
        t.dependsOn dexTailDebug
    }
    if (t.name == 'mergeDexDebug') {
        dexTailDebug.dependsOn t
    }
    if (t.name == 'stripDebugDebugSymbols') {
        dexTailDebug.mustRunAfter(t)
    }
    if (t.name == 'dexBuilderDebug' || t.name == 'mergeExtDexDebug'
            || t.name == 'mergeLibDexDebug' || t.name == 'mergeProjectDexDebug') {
        dexTailDebug.mustRunAfter(t)
    }
    if (t.name == 'assembleRelease') {
        t.dependsOn dexTailRelease
    }
    if (t.name == 'mergeDexRelease') {
        dexTailRelease.dependsOn t
    }
    if (t.name == 'stripReleaseDebugSymbols') {
        dexTailRelease.mustRunAfter(t)
    }
    if (t.name == 'dexBuilderRelease' || t.name == 'mergeExtDexRelease'
            || t.name == 'mergeLibDexRelease' || t.name == 'mergeProjectDexRelease') {
        dexTailRelease.mustRunAfter(t)
    }
}
